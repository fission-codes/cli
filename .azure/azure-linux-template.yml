jobs:
- job: ${{ parameters.name }}
  pool:
    vmImage: ${{ parameters.vmImage }}
  strategy:
    matrix:
      stack-def:
        BUILD: stack
        STACK_YAML: stack.yaml
  variables:
    STACK_ROOT: /home/vsts/.stack
  steps:
    - task: CacheBeta@0
      inputs:
        key: |
          "cache"
          $(Agent.OS)
          $(Build.SourcesDirectory)/$(STACK_YAML)
        path: .azure-cache
        cacheHitVar: CACHE_RESTORED
      displayName: "Download cache"

    - bash: |
        mkdir -p $STACK_ROOT
        tar -xzf .azure-cache/stack-root.tar.gz -C /
        mkdir -p .stack-work
        tar -xzf .azure-cache/stack-work.tar.gz
      displayName: "Unpack cache"
      condition: eq(variables.CACHE_RESTORED, 'true')

    - script: |
        mkdir -p ~/.local/bin
        curl -L https://get.haskellstack.org/stable/linux-x86_64.tar.gz | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
      displayName: Install Stack
    - script: |
        sudo apt-get update &&
        sudo apt-get -y install postgresql libpq-dev
      displayName: Install postgresql

    - script: |
        export PATH=$HOME/.local/bin:$PATH
        stack --no-terminal --install-ghc build --only-dependencies
      displayName: Build Dependencies

    - script: |
        export PATH=$HOME/.local/bin:$PATH
        stack test
      displayName: Test ${{parameters.os}} Package

    - bash: |
        mkdir -p .azure-cache
        tar -czf .azure-cache/stack-root.tar.gz $STACK_ROOT
        tar -czf .azure-cache/stack-work.tar.gz .stack-work
      displayName: "Pack cache"
    - publish: $STACK_ROOT
      artifact: fission-cli

    # - task: GitHubRelease@0
    #   displayName: 'GitHub release (edit)'
    #   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/pipeline-deploy'))
    #   inputs:
    #     gitHubConnection: fission-cli-deploy
    #     repositoryName: '$(Build.Repository.Name)'
    #     action: edit
    #     tag: 'v$(Build.SourceVersion)'
    #     title: '$(Build.SourceVersion)'
    #     releaseNotesSource: input
    #     assets: '$HOME/fission-cli-*'
    #     assetUploadMode: replace
    #     isDraft: true