jobs:
- job: ${{ parameters.name }}
  pool:
    vmImage: ${{ parameters.vmImage }}
  strategy:
    matrix:
      stack-def:
        BUILD: stack
        STACK_YAML: stack.yaml
  variables:
    STACK_ROOT: $(Build.SourcesDirectory)/.stack-root
  steps:
  - task: CacheBeta@0
    inputs:
      key: |
        "cache"
        $(Agent.OS)
        $(Build.SourcesDirectory)/$(STACK_YAML)
      path: .azure-cache
      cacheHitVar: CACHE_RESTORED
    displayName: "Download cache"

  - bash: |
      mkdir -p $STACK_ROOT
      tar -xzf .azure-cache/stack-root.tar.gz -C /
      mkdir -p .stack-work
      tar -xzf .azure-cache/stack-work.tar.gz
    displayName: "Unpack cache"
    condition: eq(variables.CACHE_RESTORED, 'true')

  - bash: |
      mkdir -p ~/.local/bin
      curl -skL https://get.haskellstack.org/stable/osx-x86_64.tar.gz | tar xz --strip-components=1 --include '*/stack' -C ~/.local/bin;
      export PATH=$HOME/.local/bin:$PATH
    displayName: Install Stack

  - bash: |
      brew update && brew install postgres
    displayName: Install Postgres

  - bash: |
      export TAR_OPTIONS=--no-same-owner
      export PATH=$HOME/.local/bin:$PATH
      stack setup --stack-yaml $(STACK_YAML)
      stack --stack-yaml $(STACK_YAML) --install-ghc build --only-dependencies --copy-bins --local-bin-path $(System.DefaultWorkingDirectory)
      # mv $HOME/fission-cli-exe $HOME/fission-cli-${{ parameters.vmImage }}
    displayName: Build Dependencies

  - bash: |
      export PATH=$HOME/.local/bin:$PATH
      stack test
    displayName: Test ${{parameters.os}} Package

  - bash: |
      mkdir -p .azure-cache
      tar -czf .azure-cache/stack-root.tar.gz $STACK_ROOT
      tar -czf .azure-cache/stack-work.tar.gz .stack-work
    displayName: "Pack cache"

  - publish: fission-cli-exe
    artifact: fission-cli-${{ parameters.vmImage }}
  # - task: GitHubRelease@0
  #   displayName: 'GitHub release (edit)'
  #   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/pipeline-deploy'))
  #   inputs:
  #     gitHubConnection: fission-cli-deploy
  #     repositoryName: '$(Build.Repository.Name)'
  #     action: edit
  #     tag: 'v$(Build.SourceVersion)'
  #     title: '$(Build.SourceVersion)'
  #     releaseNotesSource: input
  #     assets: '$HOME/fission-cli-*'
  #     assetUploadMode: replace
  #     isDraft: true
