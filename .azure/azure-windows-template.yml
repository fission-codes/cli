jobs:
- job: ${{ parameters.name }}
  timeoutInMinutes: 100
  pool:
    vmImage: ${{ parameters.vmImage }}
  strategy:
    matrix:
      stack-def:
        BUILD: stack
        STACK_YAML: stack.yaml
  variables:
    STACK_ROOT: "C:\\sr"
  steps:
    - task: CacheBeta@0
      inputs:
        key: |
          "cache"
          $(Agent.OS)
          $(Build.SourcesDirectory)/$(STACK_YAML)
        path: .azure-cache
        cacheHitVar: CACHE_RESTORED
      displayName: "Download cache"

    - bash: |
        mkdir -p $STACK_ROOT
        tar -xzf .azure-cache/stack-root.tar.gz -C /
        mkdir -p .stack-work
        tar -xzf .azure-cache/stack-work.tar.gz
      displayName: "Unpack cache"
      condition: eq(variables.CACHE_RESTORED, 'true')

    - bash: |
        curl -sSkL http://www.stackage.org/stack/windows-x86_64 -o /usr/bin/stack.zip
        unzip -o /usr/bin/stack.zip -d /usr/bin/
      displayName: Install Stack

    - bash: |
        choco install postgresql --version 9.4.25 --params '/Password:password' -y
      displayName: Install postgresql

    - bash: |
        export PATH=$HOME/.local/bin:/c/Program\ Files/PostgreSQL/9.4/bin:$PATH
        rm stack.yaml.lock
        stack --no-terminal --install-ghc build --copy-bins --local-bin-path $(Build.SourcesDirectory)
      displayName: Build Dependencies

    - bash: |
        export PATH=$HOME/.local/bin:$PATH
        stack test
      displayName: Test ${{parameters.os}} Package

    - bash: |
        mkdir -p .azure-cache
        tar -czf .azure-cache/stack-root.tar.gz $STACK_ROOT
        tar -czf .azure-cache/stack-work.tar.gz .stack-work
      displayName: "Pack cache"

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: fission-cli-exe.exe
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)/${{ parameters.vmImage }}.zip'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: $(Build.ArtifactStagingDirectory)
        artifact: '${{ parameters.name }}'

    - task: GitHubRelease@0
      displayName: 'GitHub release (edit)'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      inputs:
        gitHubConnection: fission-cli-deploy
        repositoryName: '$(Build.Repository.Name)'
        action: edit
        tag: 'commit-$(Build.SourceVersion)'
        addChangeLog: true
        compareWith: lastFullRelease
        assets: '$(Build.ArtifactStagingDirectory)/${{ parameters.vmImage }}.zip'
        assetUploadMode: replace
        isDraft: true
